# i3 config file (v4)
# Please see http://i3wm.org/docs/userguide.html for a complete reference!
#
# Volume
#bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle; exec notify-send 'toggle mute' # mute sound
#bindsym Ctrl+XF86AudioLowerVolume exec notify-send 'lower volume' # mute sound
#bindsym Ctrl+XF86AudioMicMute exec notify-send 'lower volume' # mute sound


# bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume 0 +5%; exec notify-send 'raise' #increase sound volume
# bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume 0 -5%; exec notify-send 'lower' #decrease sound volume
# bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle; exec notify-send 'mute' # mute sound

# bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5%; exec --no-startup-id notify-send -t 500 "Volume: " "$(sleep .01 && pacmd list-sinks | grep -m 1 \"volume: front\" | head -1 | awk '{print $5}')"; exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 # increase volume and unmute sound
bindsym XF86AudioRaiseVolume exec --no-startup-id ~/.local/bin/scripts/adjust_volume.sh increase 5 --max-volume 150; exec --no-startup-id ~/.local/bin/scripts/adjust_volume.sh unmute # increase volume and unmute sound
bindsym XF86AudioLowerVolume exec --no-startup-id ~/.local/bin/scripts/adjust_volume.sh decrease 5 --max-volume 150; exec --no-startup-id ~/.local/bin/scripts/adjust_volume.sh unmute # increase volume and unmute sound
bindsym XF86AudioMute exec --no-startup-id ponymix mute # mute sound


# bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +5%; exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 # increase volume and unmute sound
# bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -5%; exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 # decrease volume and unmute sound
# bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 1 # mute sound

# VGA Correction
#  bindsym XF86Display exec --no-startup-id xrandr --output DP2 --auto --above eDP1 ; exec --no-startup-id sleep 3; exec --no-startup-id nitrogen --set-zoom-fill --head=0 --random ~/Backgrounds; exec --no-startup-id sleep 3; exec --no-startup-id nitrogen --set-zoom-fill --head=1 --random ~/Backgrounds
bindsym XF86Display exec ~/.local/bin/scripts/vga_connect.sh

# HDMI Correction
# bindsym Shift+XF86Display exec --no-startup-id xrandr --output DP2 --off; exec --no-startup-id sleep 3; exec --no-startup-id nitrogen --set-zoom-fill --random ~/Backgrounds
# bindsym Shift+XF86Display exec notify-send "HDMI Screen Sizing"; exec micro_hdmi_connect.py
 


# Start wallpaper script
# Bad strategy for connecting second monitor. Better to use button.
# exec --no-startup-id /home/$USER/bin/connect_screen.py

# Set mod key (Mod1=<Alt>, Mod4=<Super>)
set $mod Mod4

# set default desktop layout (default is tiling)
# workspace_layout tabbed <stacking|tabbed>

# Configure border style <normal|1pixel|pixel xx|none|pixel>
new_window pixel 2
new_float normal

# Hide borders
hide_edge_borders none

# change borders . Removed "border none; " 11-08
bindsym $mod+u gaps inner all set 0; gaps outer all set 0

bindsym $mod+y border pixel 2; gaps inner all set 5; gaps outer all set 0;
# bindsym $mod+i border normal

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font xft:URWGothic-Book 11

# Use Mouse+$mod to drag floating windows
floating_modifier $mod

# start a terminal
#bindsym $mod+Return exec terminal
bindsym $mod+Return exec st -n st-256color

# kill focused window
bindsym $mod+Shift+q kill
bindsym Ctrl+q exec mpc toggle;

# start program launcher
bindsym $mod+d exec --no-startup-id dmenu_recency

# launch categorized menu
bindsym $mod+z exec --no-startup-id morc_menu

# launch unicode menu
bindsym $mod+grave exec notify-send 'unicodemenu'; exec --no-startup-id dmenuunicode

# popup_during_fullscreen
popup_during_fullscreen smart




################################################################################################
## sound-section - DO NOT EDIT if you wish to automatically upgrade Alsa -> Pulseaudio later! ##
################################################################################################

exec --no-startup-id volumeicon
###bindsym $mod+Ctrl+m exec terminal -e 'alsamixer'
exec --no-startup-id pulseaudio
#exec --no-startup-id pa-applet
bindsym $mod+Ctrl+m exec pavucontrol

################################################################################################

# Screen brightness controls
bindsym XF86MonBrightnessUp exec xbacklight -inc 10 # increase screen brightness
bindsym XF86MonBrightnessDown exec xbacklight -dec 10 # decrease screen brightness
# bindsym XF86MonBrightnessUp exec "xbacklight -inc 10"
# bindsym XF86MonBrightnessDown exec "xbacklight -dec 10"

# Start Applications
# bindsym XF86MonBrightnessUp exec "xbacklight -inc 10; notify-send 'brightness up'"
# bindsym XF86MonBrightnessDown exec "xbacklight -dec 10; notify-send 'brightness down'"

# Start Applications
bindsym $mod+Ctrl+b exec terminal -e 'bmenu'
bindsym F2 exec pcmanfm

bindsym $mod+t exec --no-startup-id pkill picom
bindsym $mod+Ctrl+t exec --no-startup-id "picom -b --config /home/gautierk/.config/picom.conf"
#bindsym $mod+Ctrl+Shift+d --release exec "killall dunst; exec dunst; exec notify-send 'restart dunst'"
bindsym $mod+Ctrl+Shift+d --release exec "killall dunst"; exec "dunst"; exec "notify-send 'Restart Dunst'";
# bindsym $mod+Ctrl+Shift+d --release exec "notify-send go"

# Multi-screen screenshots with scrot
# bindsym --release Shift+Print exec scrot 'screenshot_%Y%m%d_%H%M%S.png' -e 'mkdir -p ~/Pictures/screenshots && mv $f ~/Pictures/screenshots && xclip -selection clipboard -t image/png -i ~/Pictures/screenshots/`ls -1 -t ~/Pictures/screenshots | head -1`' # All screens
# 
# # OSX-like area selection screenshots
# bindsym --release Print exec scrot -s 'screenshot_%Y%m%d_%H%M%S.png' -e 'mkdir -p ~/Pictures/screenshots && mv $f ~/Pictures/screenshots && xclip -selection clipboard -t image/png -i ~/Pictures/screenshots/`ls -1 -t ~/Pictures/screenshots | head -1`' # Area selection
# bindsym Print exec --no-startup-id i3-scrot
bindsym $mod+Print --release exec --no-startup-id i3-scrot -w
bindsym $mod+Shift+Print --release exec --no-startup-id i3-scrot -s
# bindsym $mod+Shift+semicolon exec xdg-open /usr/share/doc/manjaro/i3_help.pdf
bindsym $mod+Ctrl+x --release exec --no-startup-id xkill

# focus_follows_mouse no

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right


# alternatively, you can use the cursor keys:
bindsym $mod+Left exec ~/.local/bin/scripts/cycle-workspace.py
bindsym $mod+Down exec ~/.local/bin/scripts/cycle-workspace.py
bindsym $mod+Up exec ~/.local/bin/scripts/cycle-workspace.py
bindsym $mod+Right exec ~/.local/bin/scripts/cycle-workspace.py

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
# bindsym $mod+Shift+Left move left
# bindsym $mod+Shift+Down move down
# bindsym $mod+Shift+Up move up
# bindsym $mod+Shift+Right move right

# workspace back and forth (with/without active container)
workspace_auto_back_and_forth yes
bindsym $mod+b workspace back_and_forth
bindsym $mod+Shift+b exec ~/.local/bin/scripts/polybar-toggle.sh
bindsym $mod+Ctrl+Shift+b exec ~/.local/bin/scripts/bluetooth_toggle.sh
# bindsym $mod+Shift+b move container to workspace back_and_forth; workspace back_and_forth
bindsym $mod+Shift+s exec i3-display-swap.sh

# split orientation
# bindsym $mod+h split h;exec notify-send 'tile horizontally'
# bindsym $mod+v split v;exec notify-send 'tile vertically'
bindsym $mod+q split toggle; exec notify-send 'Tile Toggle'

# toggle fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
# bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# toggle sticky
# bindsym $mod+Shift+s sticky toggle

# focus the parent container
bindsym $mod+a focus parent

# move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show

# my shortcuts
bindsym $mod+p exec "APP=\\"KeeWeb\\"; if pgrep -x \\"$APP\\" > /dev/null 2>&1; then i3-msg \\"[class=\\"$APP\\"] scratchpad show\\"; else \\"$APP\\"; sleep 3; i3-msg \\"[class=\\"$APP\\"] scratchpad show\\"; fi"
# bindsym $mod+o exec "APP=KeeWeb; notify-send $APP"
#bindsym $mod+n exec "APP=\\"simplenote\\"; CLASS=\\"Simplenote\\"; if pgrep -x \\"simplenote\\" > /dev/null 2>&1; then i3-msg \\"[class=\\"$CLASS\\"] scratchpad show\\"; else simplenote & sleep 2; i3-msg \\"[class=\\"$CLASS\\"] scratchpad show\\"; fi"
bindsym $mod+c exec "APP=\\"google-calendar\\"; CLASS=\\"google-calendar-nativefier-e22938\\"; if pgrep -x \\"google-calendar\\" > /dev/null 2>&1; then i3-msg workspace $wsCalendar; else google-calendar; fi"
bindsym $mod+s exec "APP=\\"slack\\"; CLASS=\\"Slack\\"; if pgrep -x \\"$APP\\" > /dev/null 2>&1; then i3-msg \\"[class=\\"$CLASS\\"] scratchpad show\\"; else \\"$APP\\"; fi"
bindsym $mod+v exec ~/.local/bin/scripts/ncmpcpp_toggle.sh
# "if pgrep -x ncmpcpp > /dev/null 2>&1; then i3-msg [instance=\\"music\\"] scratchpad show; else st -n music -e ncmpcpp && sleep 0.5; i3-msg [instance=\\"music\\"] scratchpad show; fi"
# bindsym $mod+Shift+c exec "if pgrep -fx 'urxvt -name calendar' > /dev/null 2>&1; then i3-msg [instance=\\"calendar\\"] scratchpad show; else urxvt -name calendar && sleep 0.5; i3-msg [instance=\\"calendar\\"] scratchpad show; fi"
bindsym $mod+Shift+c exec "if pgrep -fx 'st -n calendar' > /dev/null 2>&1; then i3-msg [instance=\\"calendar\\"] scratchpad show; else st -n calendar && sleep 0.5; i3-msg [instance=\\"calendar\\"] scratchpad show; fi"
# bindsym $mod+m exec "if pgrep -x neomutt > /dev/null 2>&1; then i3-msg [instance=\\"mail\\"] scratchpad show; else urxvt -name mail -e neomutt && sleep 0.5; i3-msg [instance=\\"mail\\"] scratchpad show; fi"
bindsym $mod+m exec "~/.local/bin/scripts/mail-toggle.sh"
# bindsym $mod+Shift+o exec "APP=\\"ckillian-openauth.sh\\"; CLASS=\\"AuthenticatorGUI\\"; if pgrep -f \\"$APP\\" > /dev/null 2>&1; then i3-msg \\"[class=\\"$CLASS\\"] scratchpad show\\"; else exec ckillian-openauth.sh; fi"
# bindsym $mod+Shift+o exec "if pgrep -f JAuth.jar > /dev/null 2>&1; then i3-msg [class=\\"AuthenticatorGUI\\"] scratchpad show; else \\"ckillian-openauth.sh\\" && sleep 0.5; i3-msg [class=\\"AuthenticatorGUI\\"] scratchpad show; fi"
# bindsym $mod+Shift+o exec "if pgrep -x JAuth.jar > /dev/null 2>&1; then i3-msg [class=AuthenticatorGUI] scratchpad show; else notify-send hello; fi"
bindsym $mod+Shift+o exec "if pgrep -x java > /dev/null 2>&1; then i3-msg [class=AuthenticatorGUI] scratchpad show; else ckillian-openauth.sh; fi"
# bindsym $mod+Shift+o exec "if pgrep -x \\"java\\"; then notify-send there; fi"
# bindsym $mod+Shift+o exec ckillian-openauth.sh
# bindsym $mod+Shift+m exec "if pgrep -f hangups > /dev/null 2>&1; then i3-msg [instance=hangups] scratchpad show; else urxvt -name hangups -e hangups; fi"
bindsym $mod+Shift+i exec "~/.local/bin/scripts/networkmanager_dmenu &"

# bindsym $mod+v exec "if pgrep -x ncmpcpp > /dev/null 2>&1; then i3-msg [instance=\\"music\\"] scratchpad show; else urxvt -name music -e ncmpcpp && sleep 0.5; i3-msg [instance=\\"music\\"] scratchpad show; fi"
bindsym $mod+o exec vivaldi-stable;


# mpc
bindsym $mod+Shift+p exec mpc toggle;
bindsym $mod+greater exec mpc next;
bindsym $mod+less exec mpc prev;
bindsym $mod+Shift+greater exec mpc seek +2%;
bindsym $mod+Shift+less exec mpc seek -2%;
bindsym $mod+Shift+0 exec mpc seek -100%;





#navigate workspaces next / previous
bindsym $mod+Ctrl+Right workspace next
bindsym $mod+Ctrl+Left workspace prev

# Workspace names
# to display names or symbols instead of plain workspace numbers you can use
# something like: set $ws1 1:mail
#                 set $ws2 2:
set $ws1 1
set $ws2 2
set $ws3 3:Html
set $ws4 4
set $ws5 5
set $ws6 6
set $ws7 7
set $ws8 8
set $wsMail 10:Mail
set $wsCalendar 11:Calendar
set $wsVoice 12:Social
set $wsNews 13:News
set $wsTodo 14:Todo
set $wsJournal 15:Journal
set $wsMcGill 16:McGill
set $wsNotes 17:Notes
set $wsLibravos 18:Libravos
set $wsTranslate 18:Translate
# set $wsCalcurseMcGill 150:
# set $wsCalcurseGeneral 151:
# set $wsCalcurseComputer 152:


# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+Shift+m workspace $wsVoice
bindsym $mod+Shift+v workspace $wsLibravos
bindsym $mod+Shift+t workspace $wsTranslate
bindsym $mod+Shift+n workspace $wsNews
# bindsym $mod+Shift+d workspace $wsTodo
# bindsym $mod+Shift+d exec st -e vim ~/.local/bin/scripts/todo/todo.txt
bindsym $mod+semicolon workspace $wsMcGill
bindsym $mod+n workspace $wsNotes
# bindsym $mod+Shift+c workspace $wsCalendar

# Move focused container to workspace
bindsym $mod+Ctrl+1 move container to workspace $ws1
bindsym $mod+Ctrl+2 move container to workspace $ws2
bindsym $mod+Ctrl+3 move container to workspace $ws3
bindsym $mod+Ctrl+4 move container to workspace $ws4
bindsym $mod+Ctrl+5 move container to workspace $ws5
bindsym $mod+Ctrl+6 move container to workspace $ws6
bindsym $mod+Ctrl+7 move container to workspace $ws7
bindsym $mod+Ctrl+8 move container to workspace $ws8
bindsym $mod+Ctrl+Shift+m move container to workspace $wsVoice
bindsym $mod+Ctrl+Shift+v move container to workspace $wsLibravos
bindsym $mod+Ctrl+Shift+t move container to workspace $wsTranslate
bindsym $mod+Ctrl+Shift+n move container to workspace $wsNotes
# bindsym $mod+Ctrl+Shift+d move container to workspace $wsTodo
# bindsym $mod+Ctrl+Shift+c move container to workspace $wsCalendar
bindsym $mod+Ctrl+semicolon move container to workspace $wsMcGill
bindsym $mod+Ctrl+n move container to workspace $wsNotes
# bindsym $mod+Ctrl+Shift+j move container to workspace $wsJournal

# Move to workspace with focused container
bindsym $mod+Shift+1 move container to workspace $ws1; workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2; workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3; workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4; workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5; workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6; workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7; workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8; workspace $ws8
bindsym $mod+Shift+semicolon move container to workspace $wsMcGill; workspace $wsMcGill
# bindsym $mod+Shift+n move container to workspace $wsNotes; workspace $wsNotes
# bindsym $mod+Shift+Shift+m move container to workspace $wsVoice; workspace $wsVoice
# bindsym $mod+Shift+Shift+n move container to workspace $wsNews; workspace $wsNews
# bindsym $mod+Shift+Shift+d move container to workspace $wsTodo; workspace $wsTodo

# Open applications on specific workspaces
# assign [class="Thunderbird"] $ws1
# assign [class="Chromium"] $ws2
# assign [class="Pcmanfm"] $ws3
# assign [class="Skype"] $ws5

# Open specific applications in floating mode
#
for_window [class=".*"] border pixel 2
for_window [title="alsamixer"] floating enable border pixel 1
for_window [class="Calamares"] floating enable border normal
for_window [class="Clipgrab"] floating enable
for_window [title="File Transfer*"] floating enable
for_window [class="Galculator"] floating enable border pixel 1
for_window [class="GParted"] floating enable border normal
for_window [title="i3_help"] floating enable sticky enable border normal
for_window [class="Lightdm-gtk-greeter-settings"] floating enable
for_window [class="Lxappearance"] floating enable sticky enable border normal
for_window [class="Manjaro-hello"] floating enable
for_window [class="Manjaro Settings Manager"] floating enable border normal
for_window [title="MuseScore: Play Panel"] floating enable
for_window [class="Nitrogen"] floating enable sticky enable border normal
for_window [class="Oblogout"] fullscreen enable
for_window [class="octopi"] floating enable
for_window [title="About Pale Moon"] floating enable
for_window [class="Pamac-manager"] floating enable
for_window [class="Pavucontrol"] floating enable
for_window [class="qt5ct"] floating enable sticky enable border normal
for_window [class="Qtconfig-qt4"] floating enable sticky enable border normal
for_window [class="Simple-scan"] floating enable border normal
for_window [class="(?i)System-config-printer.py"] floating enable border normal
for_window [class="Skype"] floating enable border normal
for_window [class="Thus"] floating enable border normal
for_window [class="Timeset-gui"] floating enable border normal
for_window [class="(?i)virtualbox"] floating enable border normal
for_window [class="Xfburn"] floating enable
for_window [class="MPlayer"] floating enable
for_window [title="Android Emulator.*"] floating enable
for_window [title="x200: ~/work"] floating enable


# switch to workspace with urgent window automatically
for_window [urgent=latest] focus

# automatically open in scratchpad
for_window [class="Simplenote"] move scratchpad
for_window [class="KeeWeb"] move scratchpad
for_window [class="Slack"] move scratchpad
# for_window [class="AuthenticatorGUI"] move scratchpad, floating_maximum_size 100 x 35
#floating enable; resize shrink width 10000px; resize grow width 400px; resize shrink height 10000px; resize grow height 800px;
for_window [class="AuthenticatorGUI"] floating enable, move scratchpad
for_window [instance="music"] move container to scratchpad
for_window [instance="hangups"] move container to scratchpad
# for_window [instance="calendar"] move container to scratchpad
# for_window [instance="mail"] move container to scratchpad, fullscreen
assign [instance="mail"] $wsMail
assign [instance="calcurseMcGill"] $wsCalcurseMcGill
assign [instance="calcurseGeneral"] $wsCalcurseGeneral
assign [instance="calcurseComputer"] $wsCalcurseComputer
assign [class="google-calendar-nativefier-e22938"] $wsCalendar
assign [instance="hwtodo"] 21:
assign [instance="shoptodo"] 22:
assign [instance="generaltodo"] 20:



# reload the configuration file
# bindsym $mod+Shift+c reload
bindsym $mod+Ctrl+Shift+c reload

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# Set shut down, restart and locking features
bindsym $mod+0 mode "$mode_system"
set $mode_system (l)ock, (e)xit, switch_(u)ser, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown
mode "$mode_system" {
    #bindsym l exec --no-startup-id i3exit lock, mode "default"
    bindsym l exec --no-startup-id i3exit lock, mode "default"
    bindsym s exec --no-startup-id i3exit suspend, mode "default"
    bindsym u exec --no-startup-id i3exit switch_user, mode "default"
    bindsym e exec --no-startup-id i3exit logout, mode "default"
    bindsym h exec --no-startup-id i3exit hibernate, mode "default"
    bindsym r exec --no-startup-id i3exit reboot, mode "default"
    bindsym Shift+s exec --no-startup-id i3exit shutdown, mode "default"

    # exit system mode: "Enter" or "Escape"
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

# Resize window (you can also use the mouse for that)
bindsym $mod+r mode "resize"
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 5 px or 5 ppt
        bindsym j resize grow height 5 px or 5 ppt
        bindsym k resize shrink height 5 px or 5 ppt
        bindsym l resize grow width 5 px or 5 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # exit resize mode: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

# Calendar window (you can also use the mouse for that)
# bindsym $mod+c workspace $wsCalcurseGeneral, fullscreen enable, mode "Calendar"
#
bindsym $mod+Shift+d exec ~/.local/bin/scripts/todo.sh
# bindsym $mod+Ctrl+Shift+j workspace $wsJournal
bindsym $mod+Ctrl+Shift+j exec ~/.local/bin/scripts/journal.sh

# vim buffers makes this unnecessary
# mode "Todo" {
# 
# 				set $wsTodoGeneral "20:"
# 				set $wdTodoShopping "22:"
# 				set $wsTodoHW "21:"
# 
#         bindsym $mod+f fullscreen toggle
# 				bindsym $mod+l exec "~/.local/bin/scripts/todo-next.sh"
# 				bindsym $mod+h exec "~/.local/bin/scripts/todo-prev.sh"
# 				
# 				bindsym $mod+j mode "default", workspace 1, focus down
# 				bindsym $mod+k mode "default", focus up
# 
#         bindsym $mod+Shift+c mode "default"
#         bindsym $mod+Shift+d mode "default", workspace 1
# 
# 				# bindsym $mod+Return exec "~/.local/bin/scripts/calcurse_init"
# }






mode "Calendar" {

				set $wsCalcurseMcGill "150:"
				set $wsCalcurseGeneral "151:"
				set $wsCalcurseComputer "152:"

        bindsym $mod+f fullscreen toggle
				bindsym $mod+l exec "sleep .1 && xdotool key s && ~/.local/bin/scripts/calcurse-next.sh && xdotool key R && i3-msg fullscreen enable"
				bindsym $mod+h exec "sleep .1 && xdotool key s && ~/.local/bin/scripts/calcurse-prev.sh && xdotool key R && i3-msg fullscreen enable"
				
				bindsym $mod+j mode "default", workspace 1, focus down
				bindsym $mod+k mode "default", focus up

        bindsym $mod+Shift+c mode "default"
        bindsym $mod+c mode "default", workspace 1

				bindsym $mod+Return exec "~/.local/bin/scripts/calcurse_init"

# 				assign [instance="calcurseMcGill"] $wsCalcurseMcGill
# 				assign [instance="calcurseGeneral"] $wsCalcurseGeneral
# 				assign [instance="calcurseComputer"] $wsCalcurseComputer
# 

					# Failed attempts
				# bindsym $mod+l exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s" fullscreen toggle, focus right, fullscreen toggle
				# bindsym $mod+l exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s",  focus right, "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s"
				# bindsym $mod+l exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s", exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % R" ,  focus right, exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s",  focus right, focus left
				# bindsym $mod+p focus right; exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s", exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % R", focus left
				# bindsym $mod+p "focus right, exec "sleep 1", focus left"
				# bindsym $mod+p exec "i3-msg focus right && sleep 1 && xdotool search calcurse | xargs -I % xdotool key --window % s && sleep 1 && i3-msg focus left"
				# bindsym $mod+p exec "sleep 1 && xdotool search calcurse | xargs -I % xdotool key --window % s"
				# bindsym $mod+p exec "i3-msg focus right && sleep 0.07 && xdotool search calcurse | xargs -I % xdotool key --window % s"
				#bindsym $mod+p focus right; sleep 1; exec "xdotool search calcurse | xargs -I % xdotool key --window % s"; sleep 1; focus left

# 				bindsym $mod+u  exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % s", exec "xdotool search \\"calcurse\\" | xargs -I % xdotool key --window % R"
# 				bindsym $mod+o exec "xdotool getactivewindow | xargs -I % xdotool key --window % s", exec "xdotool getactivewindow | xargs -I % xdotool key --window % R"
# 				bindsym $mod+i exec --no-startup-id "xdotool key s"
# 				# bindsym $mod+l exec "xdotool getwindowfocus | xargs -I % xdotool key --window % s", focus right, exec "xdotool getwindowfocus | xargs -I % xdotool key --window % R"

}


# Lock screen
# exec --no-startup-id betterlockscreen -w dim
bindsym $mod+9 exec betterlockscreen -s

# Autostart applications
exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec --no-startup-id nitrogen --restore; sleep 1; picom -b
exec --no-startup-id nm-applet
exec --no-startup-id xfce4-power-manager
exec --no-startup-id pamac-tray
exec --no-startup-id clipit
exec --no-startup-id KeeWeb
exec --no-startup-id google-calendar
# exec --no-startup-id blueman-applet
# exec_always --no-startup-id sbxkb
exec --no-startup-id start_conky_maia
# exec --no-startup-id start_conky_green
exec --no-startup-id xautolock -time 10 -locker "betterlockscreen -s" -detectsleep
exec_always --no-startup-id ff-theme-util
exec_always --no-startup-id fix_xcursor
exec_always --no-startup-id $HOME/.config/polybar/launch.sh
exec --no-startup-id /home/gautierk/.local/bin/scripts/wallpaper.sh
# exec --no-startup-id urxvt -name hangups -e hangups


# Color palette used for the terminal ( ~/.Xresources file )
# Colors are gathered based on the documentation:
# https://i3wm.org/docs/userguide.html#xresources
# Change the variable name at the place you want to match the color
# of your terminal like this:
# [example]
# If you want your bar to have the same background color as your 
# terminal background change the line 362 from:
# background #14191D
# to:
# background $term_background
# Same logic applied to everything else.
set_from_resource $term_background background
set_from_resource $term_foreground foreground
set_from_resource $term_color0     color0
set_from_resource $term_color1     color1
set_from_resource $term_color2     color2
set_from_resource $term_color3     color3
set_from_resource $term_color4     color4
set_from_resource $term_color5     color5
set_from_resource $term_color6     color6
set_from_resource $term_color7     color7
set_from_resource $term_color8     color8
set_from_resource $term_color9     color9
set_from_resource $term_color10    color10
set_from_resource $term_color11    color11
set_from_resource $term_color12    color12
set_from_resource $term_color13    color13
set_from_resource $term_color14    color14
set_from_resource $term_color15    color15

# Start i3bar to display a workspace bar (plus the system information i3status if available)
# bar {
# 	i3bar_command i3bar
# 	status_command i3status
# 	position bottom
# 
# ## please set your primary output first. Example: 'xrandr --output eDP1 --primary'
# #	tray_output primary
# #	tray_output eDP1
# 
# 	bindsym button4 nop
# 	bindsym button5 nop
#   font xft:URWGothic-Book 11
# 	strip_workspace_numbers yes
#         focused_workspace  #F9FAF9 #16a085 #292F34
#         active_workspace   #595B5B #353836 #FDF6E3
#         inactive_workspace #595B5B #283339 #EEE8D5
#         binding_mode       #16a085 #2C2C2C #F9FAF9
#         urgent_workspace   #16a085 #FDF6E3 #E5201D
#     }
# }


## bar {
##         font pango:Source Sans Pro-10 10
##   status_command i3status
##  	i3bar_command i3bar
##         position top
##         strip_workspace_numbers yes
##   colors {
##         background #000000
##         statusline #ffffff
##         separator #666666
##     focused_workspace  #6347B3 #4A318C #FFFFFF
##     active_workspace   #333333 #222222 #FFFFFF
##     inactive_workspace #333333 #222222 #FFFFFF
##     urgent_workspace   #2F343A #900000 #FFFFFF
##     binding_mode       #2F343A #900000 #FFFFFF
##   }
## }


# hide/unhide i3status bar
# bindsym $mod+m bar mode toggle

# Theme colors
# class                   border  backgr. text    indic.  child_border
  client.focused          #556064 #f499f7 #000000 #FDF6E3 #f499f7
  client.focused_inactive #2F3D44 #2F3D44 #1ABC9C #454948 
  client.unfocused        #2F3D44 #2F3D44 #1ABC9C #454948
  client.urgent           #CB4B16 #FDF6E3 #1ABC9C #268BD2
  client.placeholder      #000000 #0c0c0c #ffffff #000000 

  client.background       #2B2C2B

#############################
### settings for i3-gaps: ###
#############################

# Set inner/outer gaps
gaps inner 5
gaps outer 0
# border pixel 2; gaps inner all set 5; gaps outer all set 0;

# Additionally, you can issue commands with the following syntax. This is useful to bind keys to changing the gap size.
# gaps inner|outer current|all set|plus|minus <px>
# gaps inner all set 10
# gaps outer all plus 5

# Smart gaps (gaps used if only more than one container on the workspace)
# smart_gaps off

# Smart borders (draw borders around container only if it is not the only container on this workspace) 
# on|no_gaps (on=always activate and no_gaps=only activate if the gap size to the edge of the screen is 0)
# smart_borders off

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
set $mode_gaps Gaps: (o) outer, (i) inner
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)

bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
        bindsym o      mode "$mode_gaps_outer"
        bindsym i      mode "$mode_gaps_inner"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_inner" {
        bindsym plus  gaps inner current plus 5
        bindsym minus gaps inner current minus 5
        bindsym 0     gaps inner current set 0

        bindsym Shift+plus  gaps inner all plus 5
        bindsym Shift+minus gaps inner all minus 5
        bindsym Shift+0     gaps inner all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_outer" {
        bindsym plus  gaps outer current plus 5
        bindsym minus gaps outer current minus 5
        bindsym 0     gaps outer current set 0

        bindsym Shift+plus  gaps outer all plus 5
        bindsym Shift+minus gaps outer all minus 5
        bindsym Shift+0     gaps outer all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}


# move workspace to up monitor
bindsym $mod+Shift+Down move workspace to output down
bindsym $mod+Shift+Up move workspace to output up

